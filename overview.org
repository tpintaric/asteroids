* Asteroids Game
- Project course for OOP lessons we took.
- Will utilize bootdev cli utilities.
** uv package manager
- An extremely fast Python package and project manager, written in Rust.
- Install in arch using:  pacman -S uv
** Pygame & Virtual Envrionment
- Pygame is a module for developing games using Python. It provides simple functions and methods for us to easily draw images within a GUI window and handle user input.
- Virtual environments are Python's way to keep dependencies (e.g. the pygame module) separate from other projects on our machine. For example, we need pygame version 2 for this project, but another project on your computer might require version 1.

- As a best practice, each Python project on your machine should have
   its own virtual environment to keep them isolated from each other.
*** Setup & Activation
#+BEGIN_SRC conf
uv 06_Asteoroids_Game      # Located at: ~/workspace/github.com/tpintaric/projects/06_Asteroids_Game/
cd 06_Asteroids_Game
uv vent
source .venv/bin/activate

## For fish to activate virtual python envrionment run:
. .venv/bin/activate.fish
(06_Asteroids_Game) ✔︎ 06_Asteroids_Game (main)

# For bash or other shells use:
source .venv/bin/activate
#+END_SRC
*** Add python dependencies
#+BEGIN_SRC python
uv add pygame==2.6.1
#+END_SRC
*** Running the game
- In the root directory run: 
#+BEGIN_SRC python
uv run main.py
#+END_SRC

- In python main.py, main() function is only called when this file is
   run directly; it won't run if it's imported as a module. It's
   considered the "pythonic" way to structure an executable program in
   Python. Technically, the program will work fine by just calling
   main() but you might get an angry letter from Guido van Rossum if you don't.
#+BEGIN_SRC python
if __name__ == "__main__":
    main()
#+END_SRC
- This should now print "Starting Asteroids!" :ch:
** File Management
- We don't want to have a single file in our development.
- In Python, each file is called a module that we can import
   functions, classes and variables.
- Module name is a file name without .py extension.

#+BEGIN_SRC  python
# import the connect_database function
# and the database_version variable
# from database.py into the current file
from database import connect_database, database_version

## IMPORT EVERYTHING from FILE
from database import *             ## Only import what you need, ok for small files

## OR
import constants                   ## Another way of importing everything.
#+END_SRC
** CONSTANTS
- Games often have a lot of magic numbers to represent things like player speeds, item costs, and attack damage. We will use this file as a place to store those kind of constant values. 

#+BEGIN_SRC python
SCREEN_WIDTH = 1280
SCREEN_HEIGHT = 720

ASTEROID_MIN_RADIUS = 20
ASTEROID_KINDS = 3
ASTEROID_SPAWN_RATE = 0.8  # seconds
ASTEROID_MAX_RADIUS = ASTEROID_MIN_RADIUS * ASTEROID_KINDS
#+END_SRC
** Set Screen size
#+BEGIN_SRC python
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
#+END_SRC

** While Loop for Games
- Game generally has 3 steps:
  1. Check for player inputs
  2. Update the game world
  3. Draw the game to the screen

*** Infinite While Loop
- while True:   => Means that it is infinite loop
- for event in pygame.event.get()
   This will check if the user has closed the window and exit the game loop if they do. It will make the window's close button work.
#+BEGIN_SRC python
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            return        screen.fill("black")
    pygame.display.flip()
#+END_SRC
**** CPU usage
- Currently our game is using too much CPU
- We need to restrist drawing our black screen to 60 FPS = Frames per Second 
- We add clock variable that creates a new clock object
- we then set dt variable to 0 (used later)
- we specify that dt = clock that ticks 60 times in a second only.

#+BEGIN_SRC python
clock = pygame.time.Clock()
dt = 0

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            return        screen.fill("black")
    pygame.display.flip()
    dt = clock.tick(60) / 1000
#+END_SRC
** Final Code
*** player.py
#+BEGIN_SRC python

#+END_SRC

*** constants.py
#+BEGIN_SRC python
SCREEN_WIDTH = 1280
SCREEN_HEIGHT = 720

ASTEROID_MIN_RADIUS = 20
ASTEROID_KINDS = 3
ASTEROID_SPAWN_RATE = 0.8  # seconds
ASTEROID_MAX_RADIUS = ASTEROID_MIN_RADIUS * ASTEROID_KINDS
PLAYER_RADIUS = 20
PLAYER_TURN_SPEED = 300
PLAYER_SPEED = 200
#+END_SRC

*** main.py
#+BEGIN_SRC python
import pygame
import sys
from asteroid import Asteroid
from constants import *
from player import Player
from asteroidfield import *

pygame.init()

def main():
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    clock = pygame.time.Clock()
    dt = 0

    updatable = pygame.sprite.Group()
    drawable = pygame.sprite.Group()
    asteroids = pygame.sprite.Group()

    Asteroid.containers = (asteroids, updatable, drawable)
    AsteroidField.containers = updatable
    Player.containers = (updatable, drawable)

    player = Player(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
    asteroid = AsteroidField()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return        screen.fill("black")
        updatable.update(dt)
        ## Collision detection
        for asteroid in asteroids:
           if asteroid.collision(player):
              print("Game Over!") 
              sys.exit(1)
              
        #player.update(dt)
        screen.fill("black")
        #drawable.draw(screen)
        for sprite in drawable:
            sprite.draw(screen)

        #player.draw(screen)
        pygame.display.flip()
        dt = clock.tick(60) / 1000

if __name__ == "__main__":
    main()

#+END_SRC

*** circleshape.py
#+BEGIN_SRC python
import pygame
from circleshape import CircleShape
from constants import PLAYER_RADIUS, PLAYER_TURN_SPEED, PLAYER_SPEED

class Player(CircleShape):
    def __init__(self,x, y):
        super().__init__(x, y, PLAYER_RADIUS)
        self.rotation = 0

    # in the player class
    def triangle(self):
        forward = pygame.Vector2(0, 1).rotate(self.rotation)
        right = pygame.Vector2(0, 1).rotate(self.rotation + 90) * self.radius / 1.5
        a = self.position + forward * self.radius
        b = self.position - forward * self.radius - right
        c = self.position - forward * self.radius + right
        return [a, b, c]

    def draw(self,screen):
        pygame.draw.polygon(screen, "white", self.triangle(), 2)

    def rotate(self, dt):
        self.rotation += (PLAYER_TURN_SPEED * dt)

    def move(self, dt):
        forward = pygame.Vector2(0, 1).rotate(self.rotation)
        self.position += forward * PLAYER_SPEED * dt

    def update(self, dt):
        keys = pygame.key.get_pressed()

        if keys[pygame.K_a]:
            self.rotate(-dt)
        if keys[pygame.K_d]:
            self.rotate(dt)
        if keys[pygame.K_w]:
            self.move(-dt)
        if keys[pygame.K_s]:
            self.move(dt)
#+END_SRC

*** flycheck_player.py
#+BEGIN_SRC python
import pygame
from circleshape import CircleShape
from constants import PLAYER_RADIUS, PLAYER_TURN_SPEED, PLAYER_SPEED

class Player(CircleShape):
    def __init__(self, x, y):
        super().__init__(x, y, PLAYER_RADIUS)
        self.rotation = 0

    # in the player class
    def triangle(self):
        forward = pygame.Vector2(0, 1).rotate(self.rotation)
        right = pygame.Vector2(0, 1).rotate(self.rotation + 90) * self.radius / 1.5
        a = self.position + forward * self.radius
        b = self.position - forward * self.radius - right
        c = self.position - forward * self.radius + right
        return [a, b, c]

    def draw(self,screen):
        pygame.draw.polygon(screen, "white", self.triangle(), 2)

    def rotate(self, dt):
        self.rotation += (PLAYER_TURN_SPEED * dt)

    def move(self, dt):
        forward = pygame.Vector2(0, 1).rotate(self.rotation)
        self.position += forward * PLAYER_SPEED * dt

    def update(self, dt):
        keys = pygame.key.get_pressed()

        if keys[pygame.K_a]:
            self.rotate(-dt)
        if keys[pygame.K_d]:
            self.rotate(dt)
        if keys[pygame.K_w]:
            self.move(dt)
        if keys[pygame.K_s]:
            self.move(-dt)

#+END_SRC

